// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository_model.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2019_2_Solar/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockRepositoryInterface) Update(executeQuery string, params []interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", executeQuery, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockRepositoryInterfaceMockRecorder) Update(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositoryInterface)(nil).Update), executeQuery, params)
}

// Insert mocks base method
func (m *MockRepositoryInterface) Insert(executeQuery string, params []interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", executeQuery, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert
func (mr *MockRepositoryInterfaceMockRecorder) Insert(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockRepositoryInterface)(nil).Insert), executeQuery, params)
}

// SelectFullUser mocks base method
func (m *MockRepositoryInterface) SelectFullUser(executeQuery string, params []interface{}) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectFullUser", executeQuery, params)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectFullUser indicates an expected call of SelectFullUser
func (mr *MockRepositoryInterfaceMockRecorder) SelectFullUser(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectFullUser", reflect.TypeOf((*MockRepositoryInterface)(nil).SelectFullUser), executeQuery, params)
}

// SelectUserCookies mocks base method
func (m *MockRepositoryInterface) SelectUserCookies(executeQuery string, params []interface{}) ([]models.UserCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserCookies", executeQuery, params)
	ret0, _ := ret[0].([]models.UserCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserCookies indicates an expected call of SelectUserCookies
func (mr *MockRepositoryInterfaceMockRecorder) SelectUserCookies(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserCookies", reflect.TypeOf((*MockRepositoryInterface)(nil).SelectUserCookies), executeQuery, params)
}

// SelectOneCol mocks base method
func (m *MockRepositoryInterface) SelectOneCol(executeQuery string, params []interface{}) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOneCol", executeQuery, params)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOneCol indicates an expected call of SelectOneCol
func (mr *MockRepositoryInterfaceMockRecorder) SelectOneCol(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOneCol", reflect.TypeOf((*MockRepositoryInterface)(nil).SelectOneCol), executeQuery, params)
}

// SelectIdUsernameEmailUser mocks base method
func (m *MockRepositoryInterface) SelectIdUsernameEmailUser(executeQuery string, params []interface{}) ([]models.UserUnique, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectIdUsernameEmailUser", executeQuery, params)
	ret0, _ := ret[0].([]models.UserUnique)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectIdUsernameEmailUser indicates an expected call of SelectIdUsernameEmailUser
func (mr *MockRepositoryInterfaceMockRecorder) SelectIdUsernameEmailUser(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectIdUsernameEmailUser", reflect.TypeOf((*MockRepositoryInterface)(nil).SelectIdUsernameEmailUser), executeQuery, params)
}

// DeleteSession mocks base method
func (m *MockRepositoryInterface) DeleteSession(executeQuery string, params []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", executeQuery, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockRepositoryInterfaceMockRecorder) DeleteSession(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteSession), executeQuery, params)
}
