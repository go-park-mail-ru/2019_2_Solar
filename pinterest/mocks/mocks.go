// Code generated by MockGen. DO NOT EDIT.
// Source: pinterest/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2019_2_Solar/pkg/models"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateNewUser mocks base method
func (m *MockUsecase) CreateNewUser(newUser *models.UserReg) models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", newUser)
	ret0, _ := ret[0].(models.User)
	return ret0
}

// CreateNewUser indicates an expected call of CreateNewUser
func (mr *MockUsecaseMockRecorder) CreateNewUser(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockUsecase)(nil).CreateNewUser), newUser)
}

// CreateNewUserSession mocks base method
func (m *MockUsecase) CreateNewUserSession(newUserSession models.User) ([]http.Cookie, models.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUserSession", newUserSession)
	ret0, _ := ret[0].([]http.Cookie)
	ret1, _ := ret[1].(models.UserSession)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateNewUserSession indicates an expected call of CreateNewUserSession
func (mr *MockUsecaseMockRecorder) CreateNewUserSession(newUserSession interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUserSession", reflect.TypeOf((*MockUsecase)(nil).CreateNewUserSession), newUserSession)
}

// SaveNewProfileUser mocks base method
func (m *MockUsecase) SaveNewProfileUser(userID uint64, newUser *models.EditUserProfile) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveNewProfileUser", userID, newUser)
}

// SaveNewProfileUser indicates an expected call of SaveNewProfileUser
func (mr *MockUsecaseMockRecorder) SaveNewProfileUser(userID, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewProfileUser", reflect.TypeOf((*MockUsecase)(nil).SaveNewProfileUser), userID, newUser)
}

// DeleteOldUserSession mocks base method
func (m *MockUsecase) DeleteOldUserSession(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldUserSession", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldUserSession indicates an expected call of DeleteOldUserSession
func (mr *MockUsecaseMockRecorder) DeleteOldUserSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldUserSession", reflect.TypeOf((*MockUsecase)(nil).DeleteOldUserSession), arg0)
}

// SearchCookie mocks base method
func (m *MockUsecase) SearchCookie(arg0 *http.Request) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCookie", arg0)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCookie indicates an expected call of SearchCookie
func (mr *MockUsecaseMockRecorder) SearchCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCookie", reflect.TypeOf((*MockUsecase)(nil).SearchCookie), arg0)
}

// SearchUserByEmail mocks base method
func (m *MockUsecase) SearchUserByEmail(newUserLogin *models.UserLogin) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserByEmail", newUserLogin)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// SearchUserByEmail indicates an expected call of SearchUserByEmail
func (mr *MockUsecaseMockRecorder) SearchUserByEmail(newUserLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserByEmail", reflect.TypeOf((*MockUsecase)(nil).SearchUserByEmail), newUserLogin)
}

// SearchIdUserByCookie mocks base method
func (m *MockUsecase) SearchIdUserByCookie(r *http.Request) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIdUserByCookie", r)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIdUserByCookie indicates an expected call of SearchIdUserByCookie
func (mr *MockUsecaseMockRecorder) SearchIdUserByCookie(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIdUserByCookie", reflect.TypeOf((*MockUsecase)(nil).SearchIdUserByCookie), r)
}

// GetUserIndexByID mocks base method
func (m *MockUsecase) GetUserIndexByID(id uint64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIndexByID", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserIndexByID indicates an expected call of GetUserIndexByID
func (mr *MockUsecaseMockRecorder) GetUserIndexByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIndexByID", reflect.TypeOf((*MockUsecase)(nil).GetUserIndexByID), id)
}

// GetUserByID mocks base method
func (m *MockUsecase) GetUserByID(id uint64) models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(models.User)
	return ret0
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockUsecaseMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUsecase)(nil).GetUserByID), id)
}

// GetAllUsers mocks base method
func (m *MockUsecase) GetAllUsers() []models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]models.User)
	return ret0
}

// GetAllUsers indicates an expected call of GetAllUsers
func (mr *MockUsecaseMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUsecase)(nil).GetAllUsers))
}

// ExtractFormatFile mocks base method
func (m *MockUsecase) ExtractFormatFile(FileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractFormatFile", FileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractFormatFile indicates an expected call of ExtractFormatFile
func (mr *MockUsecaseMockRecorder) ExtractFormatFile(FileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFormatFile", reflect.TypeOf((*MockUsecase)(nil).ExtractFormatFile), FileName)
}

// SetJsonData mocks base method
func (m *MockUsecase) SetJsonData(data interface{}, infMsg string) models.OutJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJsonData", data, infMsg)
	ret0, _ := ret[0].(models.OutJSON)
	return ret0
}

// SetJsonData indicates an expected call of SetJsonData
func (mr *MockUsecaseMockRecorder) SetJsonData(data, infMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJsonData", reflect.TypeOf((*MockUsecase)(nil).SetJsonData), data, infMsg)
}

// SetResponseError mocks base method
func (m *MockUsecase) SetResponseError(encoder *json.Encoder, msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResponseError", encoder, msg, err)
}

// SetResponseError indicates an expected call of SetResponseError
func (mr *MockUsecaseMockRecorder) SetResponseError(encoder, msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseError", reflect.TypeOf((*MockUsecase)(nil).SetResponseError), encoder, msg, err)
}

// RegEmailIsUnique mocks base method
func (m *MockUsecase) RegEmailIsUnique(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegEmailIsUnique", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RegEmailIsUnique indicates an expected call of RegEmailIsUnique
func (mr *MockUsecaseMockRecorder) RegEmailIsUnique(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegEmailIsUnique", reflect.TypeOf((*MockUsecase)(nil).RegEmailIsUnique), arg0)
}

// RegUsernameIsUnique mocks base method
func (m *MockUsecase) RegUsernameIsUnique(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegUsernameIsUnique", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RegUsernameIsUnique indicates an expected call of RegUsernameIsUnique
func (mr *MockUsecaseMockRecorder) RegUsernameIsUnique(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegUsernameIsUnique", reflect.TypeOf((*MockUsecase)(nil).RegUsernameIsUnique), username)
}

// EditEmailIsUnique mocks base method
func (m *MockUsecase) EditEmailIsUnique(email string, idUser uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditEmailIsUnique", email, idUser)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EditEmailIsUnique indicates an expected call of EditEmailIsUnique
func (mr *MockUsecaseMockRecorder) EditEmailIsUnique(email, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEmailIsUnique", reflect.TypeOf((*MockUsecase)(nil).EditEmailIsUnique), email, idUser)
}

// EditUsernameIsUnique mocks base method
func (m *MockUsecase) EditUsernameIsUnique(username string, idUser uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUsernameIsUnique", username, idUser)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EditUsernameIsUnique indicates an expected call of EditUsernameIsUnique
func (mr *MockUsecaseMockRecorder) EditUsernameIsUnique(username, idUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUsernameIsUnique", reflect.TypeOf((*MockUsecase)(nil).EditUsernameIsUnique), username, idUser)
}

// RegDataCheck mocks base method
func (m *MockUsecase) RegDataCheck(newUser *models.UserReg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegDataCheck", newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegDataCheck indicates an expected call of RegDataCheck
func (mr *MockUsecaseMockRecorder) RegDataCheck(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegDataCheck", reflect.TypeOf((*MockUsecase)(nil).RegDataCheck), newUser)
}

// EditProfileDataCheck mocks base method
func (m *MockUsecase) EditProfileDataCheck(newProfileUser *models.EditUserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfileDataCheck", newProfileUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfileDataCheck indicates an expected call of EditProfileDataCheck
func (mr *MockUsecaseMockRecorder) EditProfileDataCheck(newProfileUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfileDataCheck", reflect.TypeOf((*MockUsecase)(nil).EditProfileDataCheck), newProfileUser)
}
