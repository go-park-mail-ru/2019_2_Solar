// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/usecase_model.go

// Package mocks is a generated GoMock package.
package mocks

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2019_2_Solar/pkg/models"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockUsecaseInterface is a mock of UsecaseInterface interface
type MockUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseInterfaceMockRecorder
}

// MockUsecaseInterfaceMockRecorder is the mock recorder for MockUsecaseInterface
type MockUsecaseInterfaceMockRecorder struct {
	mock *MockUsecaseInterface
}

// NewMockUsecaseInterface creates a new mock instance
func NewMockUsecaseInterface(ctrl *gomock.Controller) *MockUsecaseInterface {
	mock := &MockUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecaseInterface) EXPECT() *MockUsecaseInterfaceMockRecorder {
	return m.recorder
}

// SetJSONData mocks base method
func (m *MockUsecaseInterface) SetJsonData(data interface{}, infMsg string) models.OutJSON {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJSONData", data, infMsg)
	ret0, _ := ret[0].(models.OutJSON)
	return ret0
}

// SetJSONData indicates an expected call of SetJSONData
func (mr *MockUsecaseInterfaceMockRecorder) SetJsonData(data, infMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJSONData", reflect.TypeOf((*MockUsecaseInterface)(nil).SetJsonData), data, infMsg)
}

// SetResponseError mocks base method
func (m *MockUsecaseInterface) SetResponseError(encoder *json.Encoder, msg string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResponseError", encoder, msg, err)
}

// SetResponseError indicates an expected call of SetResponseError
func (mr *MockUsecaseInterfaceMockRecorder) SetResponseError(encoder, msg, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseError", reflect.TypeOf((*MockUsecaseInterface)(nil).SetResponseError), encoder, msg, err)
}

// ReadUserStructByEmail mocks base method
func (m *MockUsecaseInterface) ReadUserStructByEmail(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserStructByEmail", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserStructByEmail indicates an expected call of ReadUserStructByEmail
func (mr *MockUsecaseInterfaceMockRecorder) ReadUserStructByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserStructByEmail", reflect.TypeOf((*MockUsecaseInterface)(nil).ReadUserStructByEmail), email)
}

// ReadUserIdByEmail mocks base method
func (m *MockUsecaseInterface) ReadUserIdByEmail(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserIdByEmail", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserIdByEmail indicates an expected call of ReadUserIdByEmail
func (mr *MockUsecaseInterfaceMockRecorder) ReadUserIdByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserIdByEmail", reflect.TypeOf((*MockUsecaseInterface)(nil).ReadUserIdByEmail), email)
}

// GetAllUsers mocks base method
func (m *MockUsecaseInterface) GetAllUsers() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers
func (mr *MockUsecaseInterfaceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUsecaseInterface)(nil).GetAllUsers))
}

// RegDataValidationCheck mocks base method
func (m *MockUsecaseInterface) RegDataValidationCheck(newUser *models.UserReg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegDataValidationCheck", newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegDataValidationCheck indicates an expected call of RegDataValidationCheck
func (mr *MockUsecaseInterfaceMockRecorder) RegDataValidationCheck(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegDataValidationCheck", reflect.TypeOf((*MockUsecaseInterface)(nil).RegDataValidationCheck), newUser)
}

// RegEmailIsUnique mocks base method
func (m *MockUsecaseInterface) RegEmailIsUnique(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegEmailIsUnique", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegEmailIsUnique indicates an expected call of RegEmailIsUnique
func (mr *MockUsecaseInterfaceMockRecorder) RegEmailIsUnique(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegEmailIsUnique", reflect.TypeOf((*MockUsecaseInterface)(nil).RegEmailIsUnique), email)
}

// RegUsernameIsUnique mocks base method
func (m *MockUsecaseInterface) RegUsernameIsUnique(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegUsernameIsUnique", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegUsernameIsUnique indicates an expected call of RegUsernameIsUnique
func (mr *MockUsecaseInterfaceMockRecorder) RegUsernameIsUnique(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegUsernameIsUnique", reflect.TypeOf((*MockUsecaseInterface)(nil).RegUsernameIsUnique), username)
}

// EditProfileDataValidationCheck mocks base method
func (m *MockUsecaseInterface) EditProfileDataValidationCheck(newProfileUser *models.EditUserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfileDataValidationCheck", newProfileUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditProfileDataValidationCheck indicates an expected call of EditProfileDataValidationCheck
func (mr *MockUsecaseInterfaceMockRecorder) EditProfileDataValidationCheck(newProfileUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfileDataValidationCheck", reflect.TypeOf((*MockUsecaseInterface)(nil).EditProfileDataValidationCheck), newProfileUser)
}

// EditUsernameEmailIsUnique mocks base method
func (m *MockUsecaseInterface) EditUsernameEmailIsUnique(newUsername, newEmail, username, email string, userId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditUsernameEmailIsUnique", newUsername, newEmail, username, email, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditUsernameEmailIsUnique indicates an expected call of EditUsernameEmailIsUnique
func (mr *MockUsecaseInterfaceMockRecorder) EditUsernameEmailIsUnique(newUsername, newEmail, username, email, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditUsernameEmailIsUnique", reflect.TypeOf((*MockUsecaseInterface)(nil).EditUsernameEmailIsUnique), newUsername, newEmail, username, email, userId)
}

// UpdateUser mocks base method
func (m *MockUsecaseInterface) UpdateUser(user models.User, userId uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUsecaseInterfaceMockRecorder) UpdateUser(user, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUsecaseInterface)(nil).UpdateUser), user, userId)
}

// InsertNewUser mocks base method
func (m *MockUsecaseInterface) InsertNewUser(username, email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertNewUser", username, email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewUser indicates an expected call of InsertNewUser
func (mr *MockUsecaseInterfaceMockRecorder) InsertNewUser(username, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewUser", reflect.TypeOf((*MockUsecaseInterface)(nil).InsertNewUser), username, email, password)
}

// CreateNewUserSession mocks base method
func (m *MockUsecaseInterface) CreateNewUserSession(userId string) (http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUserSession", userId)
	ret0, _ := ret[0].(http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUserSession indicates an expected call of CreateNewUserSession
func (mr *MockUsecaseInterfaceMockRecorder) CreateNewUserSession(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUserSession", reflect.TypeOf((*MockUsecaseInterface)(nil).CreateNewUserSession), userId)
}

// DeleteOldUserSession mocks base method
func (m *MockUsecaseInterface) DeleteOldUserSession(sessionKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldUserSession", sessionKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldUserSession indicates an expected call of DeleteOldUserSession
func (mr *MockUsecaseInterfaceMockRecorder) DeleteOldUserSession(sessionKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldUserSession", reflect.TypeOf((*MockUsecaseInterface)(nil).DeleteOldUserSession), sessionKey)
}
