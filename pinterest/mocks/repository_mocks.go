// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository_model.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2019_2_Solar/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// WriteData mocks base method
func (m *MockRepositoryInterface) WriteData(executeQuery string, params []interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteData", executeQuery, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteData indicates an expected call of WriteData
func (mr *MockRepositoryInterfaceMockRecorder) WriteData(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockRepositoryInterface)(nil).WriteData), executeQuery, params)
}

// ReadUser mocks base method
func (m *MockRepositoryInterface) ReadUser(executeQuery string, params []interface{}) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUser", executeQuery, params)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUser indicates an expected call of ReadUser
func (mr *MockRepositoryInterfaceMockRecorder) ReadUser(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUser", reflect.TypeOf((*MockRepositoryInterface)(nil).ReadUser), executeQuery, params)
}

// ReadUserCookies mocks base method
func (m *MockRepositoryInterface) ReadUserCookies(executeQuery string, params []interface{}) ([]models.UserCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserCookies", executeQuery, params)
	ret0, _ := ret[0].([]models.UserCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserCookies indicates an expected call of ReadUserCookies
func (mr *MockRepositoryInterfaceMockRecorder) ReadUserCookies(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserCookies", reflect.TypeOf((*MockRepositoryInterface)(nil).ReadUserCookies), executeQuery, params)
}

// ReadOneCol mocks base method
func (m *MockRepositoryInterface) ReadOneCol(executeQuery string, params []interface{}) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOneCol", executeQuery, params)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOneCol indicates an expected call of ReadOneCol
func (mr *MockRepositoryInterfaceMockRecorder) ReadOneCol(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOneCol", reflect.TypeOf((*MockRepositoryInterface)(nil).ReadOneCol), executeQuery, params)
}

// DeleteSession mocks base method
func (m *MockRepositoryInterface) DeleteSession(executeQuery string, params []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", executeQuery, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *MockRepositoryInterfaceMockRecorder) DeleteSession(executeQuery, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteSession), executeQuery, params)
}
